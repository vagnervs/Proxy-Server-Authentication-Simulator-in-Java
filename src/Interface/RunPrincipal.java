/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Interface.RunPrincipal.inicarAnimacaoResposta;
import SeverProxy.Server;
import java.awt.Color;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPasswordField;
import javax.swing.JTextField;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

public class RunPrincipal extends javax.swing.JFrame {

    private Socket socketCliente;
    private Server serverTeste;
    private BufferedReader read;
    private PrintWriter output;
    boolean statusServidor = false;
    private String usuario;
    private ImageIcon img;
    private Socket socketServidor;
    private int novoUsuario = 0;
    boolean verificarValidacao = false;
    int pauseAnimacao = 0;
    private int erro40 = 0;
    private List<String> list;

    /**
     * Creates new form NewJFrame
     */
    public RunPrincipal() {
        initComponents();
        setExtendedState(JFrame.NORMAL);
        jEditorPane1.setEditable(false);
        listaSit();

        //verificar se url é válida
        list = new ArrayList<>();
        list.add("www.backnet.com.br");
        list.add("www.evolucaointernet.com.br");
        list.add("www.tecmundo.com.br");
        list.add("www.tecnoblogs.com.br");
        // Inicia Thread que fica aguardando o servidor
        //ser inicializado e aguardar um cliente conectar
        new Threadd().start();

    }

    public boolean contemPagina(String url) {
        boolean contem = false;
        for (String list1 : list) {
            if (list1 == null ? url == null : list1.equals(url)) {
                contem = true;
                System.out.println("contem: "+ contem);
                break;
            }
        }
        return contem;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jDialog1 = new javax.swing.JDialog();
        jPanel2 = new javax.swing.JPanel();
        status1 = new javax.swing.JLabel();
        status2 = new javax.swing.JLabel();
        status4 = new javax.swing.JLabel();
        paginaWeb = new javax.swing.JLabel();
        seta3 = new javax.swing.JLabel();
        status3 = new javax.swing.JLabel();
        painelAnimacao = new javax.swing.JPanel();
        folderGo2 = new javax.swing.JLabel();
        folderGo3 = new javax.swing.JLabel();
        cliente_servidor = new javax.swing.JLabel();
        folderGo1 = new javax.swing.JLabel();
        backFolder2 = new javax.swing.JLabel();
        backFolder1 = new javax.swing.JLabel();
        backFolder3 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTAUsuer = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTASever = new javax.swing.JTextArea();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jBtStartServer = new javax.swing.JButton();
        jBStartClient = new javax.swing.JButton();
        jBFinishCllient = new javax.swing.JButton();
        jBFinishSever = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        listaSite = new javax.swing.JList();
        jLayeredPaneLogin = new javax.swing.JLayeredPane();
        UrlPagina = new javax.swing.JTextField();
        jBSubmit = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jEditorPane1 = new javax.swing.JEditorPane();

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        status1.setBackground(new java.awt.Color(102, 255, 102));
        status1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        status1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/cliente.png"))); // NOI18N
        status1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        status2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/cadeado_fechado.png"))); // NOI18N
        status2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        status4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/computador.png"))); // NOI18N
        status4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        paginaWeb.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/site1.png"))); // NOI18N
        paginaWeb.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        seta3.setBackground(new java.awt.Color(204, 204, 204));
        seta3.setOpaque(true);

        status3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/cadeado_fechado.png"))); // NOI18N
        status3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        javax.swing.GroupLayout painelAnimacaoLayout = new javax.swing.GroupLayout(painelAnimacao);
        painelAnimacao.setLayout(painelAnimacaoLayout);
        painelAnimacaoLayout.setHorizontalGroup(
            painelAnimacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelAnimacaoLayout.createSequentialGroup()
                .addGroup(painelAnimacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelAnimacaoLayout.createSequentialGroup()
                        .addComponent(folderGo1, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(folderGo2, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(folderGo3, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelAnimacaoLayout.createSequentialGroup()
                        .addContainerGap(384, Short.MAX_VALUE)
                        .addComponent(backFolder3, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(backFolder2, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(backFolder1, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cliente_servidor, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        painelAnimacaoLayout.setVerticalGroup(
            painelAnimacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, painelAnimacaoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelAnimacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(painelAnimacaoLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(folderGo1, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(folderGo3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(folderGo2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addComponent(cliente_servidor, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                .addGroup(painelAnimacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(backFolder1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(painelAnimacaoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(backFolder2, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(backFolder3, javax.swing.GroupLayout.PREFERRED_SIZE, 13, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(status1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(status2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(painelAnimacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(status3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(status4)
                .addGap(29, 29, 29)
                .addComponent(seta3, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                .addComponent(paginaWeb)
                .addGap(65, 65, 65))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(status4, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(seta3, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(painelAnimacao, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(status1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(status3))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addComponent(status2))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addComponent(paginaWeb)))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jTAUsuer.setColumns(20);
        jTAUsuer.setRows(5);
        jScrollPane1.setViewportView(jTAUsuer);

        jTASever.setColumns(20);
        jTASever.setRows(5);
        jScrollPane2.setViewportView(jTASever);

        jLabel3.setText("Sever Status");

        jLabel2.setText("Status User");

        jBtStartServer.setText("Start Server");
        jBtStartServer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtStartServerActionPerformed(evt);
            }
        });

        jBStartClient.setText("Start Client");
        jBStartClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBStartClientActionPerformed(evt);
            }
        });

        jBFinishCllient.setText("Finish Cllient");
        jBFinishCllient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBFinishCllientActionPerformed(evt);
            }
        });

        jBFinishSever.setText("Finish Sever");
        jBFinishSever.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBFinishSeverActionPerformed(evt);
            }
        });

        listaSite.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane4.setViewportView(listaSite);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap(4, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(59, 59, 59)
                        .addComponent(jLabel2))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jBStartClient)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBFinishCllient)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addGap(58, 58, 58)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jBtStartServer)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBFinishSever))))
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtStartServer)
                    .addComponent(jBStartClient)
                    .addComponent(jBFinishCllient)
                    .addComponent(jBFinishSever))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jScrollPane1)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37))
        );

        jLayeredPaneLogin.setBackground(new java.awt.Color(204, 255, 204));
        jLayeredPaneLogin.setOpaque(true);

        jBSubmit.setText("Subimit");
        jBSubmit.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jBSubmitMouseClicked(evt);
            }
        });
        jBSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBSubmitActionPerformed(evt);
            }
        });

        jScrollPane3.setViewportView(jEditorPane1);

        javax.swing.GroupLayout jLayeredPaneLoginLayout = new javax.swing.GroupLayout(jLayeredPaneLogin);
        jLayeredPaneLogin.setLayout(jLayeredPaneLoginLayout);
        jLayeredPaneLoginLayout.setHorizontalGroup(
            jLayeredPaneLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPaneLoginLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jLayeredPaneLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 846, Short.MAX_VALUE)
                    .addGroup(jLayeredPaneLoginLayout.createSequentialGroup()
                        .addComponent(UrlPagina)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jBSubmit)))
                .addContainerGap())
        );
        jLayeredPaneLoginLayout.setVerticalGroup(
            jLayeredPaneLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPaneLoginLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jLayeredPaneLoginLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(UrlPagina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBSubmit))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 490, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(153, 153, 153))
        );
        jLayeredPaneLogin.setLayer(UrlPagina, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPaneLogin.setLayer(jBSubmit, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPaneLogin.setLayer(jScrollPane3, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLayeredPaneLogin))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLayeredPaneLogin, javax.swing.GroupLayout.PREFERRED_SIZE, 537, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBSubmitMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jBSubmitMouseClicked

// mostrar layout de login        

    }//GEN-LAST:event_jBSubmitMouseClicked

    private void jBSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBSubmitActionPerformed

        //  new iniciarAnimacaoResposta().start();
        if (novoUsuario == 1) {

            verificarValidacao = true;
            novoUsuario = 0;
            img = new ImageIcon(this.getClass().getResource("/imagens/cadeado_fechado.png"));
            status3.setIcon(img);
            seta3.setBackground(null);
            cliente_servidor.setBackground(null);
            status2.setIcon(img);
            file = null;
            paginaWeb.setIcon(new ImageIcon(this.getClass().getResource("/imagens/site1.png")));
            jTAUsuer.setText(jTAUsuer.getText() + "\n Nova Solicitação!");
            jTASever.setText(jTASever.getText() + "\n Nova Solicitação!");

        }
        dialogoLogin();

// TODO add your handling code here:
    }//GEN-LAST:event_jBSubmitActionPerformed

    private void jBtStartServerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtStartServerActionPerformed
//

        try {
            serverTeste = new Server();
            serverTeste.criarServerSocket(3128);
            jTASever.setText(jTASever.getText() + "\nServidor online!");
            jTASever.setText(jTASever.getText() + "\n Aguardando conexão...");
            statusServidor = true;
        } catch (IOException e) {
            //tratar exceçao
            System.out.println("ERRO no servidor: " + e.getMessage());
        }

// TODO add your handling code here:
    }//GEN-LAST:event_jBtStartServerActionPerformed

    private void jBStartClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBStartClientActionPerformed

        jTAUsuer.setText(jTAUsuer.getText() + " \nEstabelecendo conexão...");

        try {
            socketCliente = new Socket("localhost", 3128);
            jTAUsuer.setText(jTAUsuer.getText() + "\n Conexão estabelecida com servidor");

        } catch (IOException ex) {

            jTAUsuer.setText(jTAUsuer.getText() + "\n Servidor offline!");
            jTAUsuer.setText(jTAUsuer.getText() + "\n Inicialize Servidor \n e repita a operação!");

        }


    }//GEN-LAST:event_jBStartClientActionPerformed

    private void jBFinishSeverActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBFinishSeverActionPerformed

        try {
            serverTeste.finalizarServidor();
            jTASever.setText(jTASever.getText() + "\nServidor finalizado!");
            statusServidor = false;
            verificarValidacao = false;

        } catch (Exception e) {
            //  e.printStackTrace();
            jTASever.setText(jTASever.getText() + "\nServidor não inicializado!");
            System.out.println();

        }
// TODO add your handling code here:
    }//GEN-LAST:event_jBFinishSeverActionPerformed

    private void jBFinishCllientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBFinishCllientActionPerformed
        try {
            // TODO add your handling code here:
            if (serverTeste != null) {
                serverTeste.fecharSocket(socketCliente);
                jTAUsuer.setText(jTAUsuer.getText() + "\n Cliente finalizado!");
            }

        } catch (IOException e) {

            System.out.println("Testando aqui");

        }

    }//GEN-LAST:event_jBFinishCllientActionPerformed
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RunPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RunPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RunPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RunPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RunPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField UrlPagina;
    private javax.swing.JLabel backFolder1;
    private javax.swing.JLabel backFolder2;
    private javax.swing.JLabel backFolder3;
    private javax.swing.JLabel cliente_servidor;
    private javax.swing.JLabel folderGo1;
    private javax.swing.JLabel folderGo2;
    private javax.swing.JLabel folderGo3;
    private javax.swing.JButton jBFinishCllient;
    private javax.swing.JButton jBFinishSever;
    private javax.swing.JButton jBStartClient;
    private javax.swing.JButton jBSubmit;
    private javax.swing.JButton jBtStartServer;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JEditorPane jEditorPane1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLayeredPane jLayeredPaneLogin;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea jTASever;
    private javax.swing.JTextArea jTAUsuer;
    private javax.swing.JList listaSite;
    private javax.swing.JLabel paginaWeb;
    private javax.swing.JPanel painelAnimacao;
    private javax.swing.JLabel seta3;
    private javax.swing.JLabel status1;
    private javax.swing.JLabel status2;
    private javax.swing.JLabel status3;
    private javax.swing.JLabel status4;
    // End of variables declaration//GEN-END:variables

    private void listaSit() {

        DefaultListModel model = new DefaultListModel();
        model.addElement("www.backnet.com.br");
        model.addElement("www.evolucaointernet.com.br");
        model.addElement("www.tecmundo.com.br");
        model.addElement("www.tecnoblogs.com.br");
        listaSite.setModel(model);
        listaSite.addListSelectionListener(new ListSelectionListener() {

            @Override
            public void valueChanged(ListSelectionEvent lse) {

                UrlPagina.setText((String) listaSite.getSelectedValue());
            }
        });

    }
    private File file;

    private void dialogoLogin() {

        if (!(UrlPagina.getText().isEmpty())) {

            JLabel label_login = new JLabel("Username:");
            JTextField login = new JTextField();

            JLabel label_password = new JLabel("Password:");
            JPasswordField password = new JPasswordField();

            Object[] array = {label_login, login, label_password, password};

            int res = JOptionPane.showConfirmDialog(null, array, "Login",
                    JOptionPane.OK_CANCEL_OPTION,
                    JOptionPane.PLAIN_MESSAGE);

            AnimacaoSolicitar animacaoThread;
            inicarAnimacaoResposta respostaThread = new inicarAnimacaoResposta();;

            if (res == JOptionPane.OK_OPTION) {
                verificarValidacao = true;
                novoUsuario = 1;
                // Imagem de animação dos pacotes de enviado pelo usuário
                folderGo1.setIcon(new ImageIcon(getClass().getResource("/animacao/folder_go.png")));
                folderGo2.setIcon(new ImageIcon(getClass().getResource("/animacao/folder_go.png")));
                folderGo3.setIcon(new ImageIcon(getClass().getResource("/animacao/folder_go.png")));
                cliente_servidor.setBackground(Color.BLACK);
                // Inicia Thread que mostrar a animação quando o Usuário submete o login
                animacaoThread = new AnimacaoSolicitar();
                animacaoThread.start();

                try {
                    output = new PrintWriter(new OutputStreamWriter(socketCliente.getOutputStream()));
                } catch (IOException ex) {
                    Logger.getLogger(RunPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }

                //envia nome para o servidor comparar com os usúarios que está cadastrado no servidor 
                output.println(login.getText().trim());
                //envia senha para o servidor comparar com os usúarios que está cadastrado no servidor
                output.println(password.getText().trim());
                output.flush();

                try {
                    // Objeto que receb a resposta  do servidor
                    read = new BufferedReader(new InputStreamReader(socketCliente.getInputStream()));
                    //armazena resposta
                    String response = read.readLine();
                    System.out.println("This is the response: " + response);
                    Timer timer;
                    //Caso Login com sucesso
                    if (!response.equals("Login Failed")) {

                        // Pega o caminho absoluto do projeto
                        String caminhoAtual = new File("").getAbsolutePath();
                        String novoArquivo = caminhoAtual + File.separator + "pagina" + File.separator + UrlPagina.getText().trim() + ".html";

                        file = new File(novoArquivo);

                        timer = new Timer();
                        timer.schedule(new TimerTask() {

                            @Override
                            public void run() {

                                try {
                                    animacaoThread.stop();
                                    //Limpa simulação de pacotes 
                                    folderGo1.setIcon(null);
                                    folderGo2.setIcon(null);
                                    folderGo3.setIcon(null);
                                    respostaThread.start();

                                } catch (Throwable ex) {
                                    Logger.getLogger(RunPrincipal.class.getName()).log(Level.SEVERE, null, ex);

                                }

                                // Imagem de animação dos pacotes de resposta 
                                backFolder1.setIcon(new ImageIcon(getClass().getResource("/animacao/folder_back.png")));
                                backFolder2.setIcon(new ImageIcon(getClass().getResource("/animacao/folder_back.png")));
                                backFolder3.setIcon(new ImageIcon(getClass().getResource("/animacao/folder_back.png")));
                                img = new ImageIcon(this.getClass().getResource("/imagens/cadeado_aberto.png"));
                                status3.setIcon(img);

                            }
                        }, 5 * 1000);

                        timer = new Timer();
                        timer.schedule(new TimerTask() {

                            @Override
                            public void run() {

                                try {

                                    respostaThread.stop();
                                    backFolder1.setIcon(null);
                                    backFolder2.setIcon(null);
                                    backFolder3.setIcon(null);

                                    img = new ImageIcon(this.getClass().getResource("/imagens/cadeado_aberto.png"));
                                    status2.setIcon(img);
                                    seta3.setBackground(Color.BLACK);

                                    jTAUsuer.setText(jTAUsuer.getText() + "\n Welcome, " + response);
                                    jTASever.setText(jTASever.getText() + "\n Usuário, " + response + " autenticado ");
                                    jTAUsuer.setText(jTAUsuer.getText() + "\n Resposta Sevidor" + response);
                                    JOptionPane.showMessageDialog(null, "Usuário autenticado");
                                    System.out.println("Usuário autenticado!1 ");

                                    boolean pagina = contemPagina(UrlPagina.getText());
                                    if (pagina) {
                                        jEditorPane1.setPage(file.toURI().toURL());
                                        System.out.println("Laura " + file.toURI().toURL());
                                        paginaWeb.setIcon(new ImageIcon(this.getClass().getResource("/imagens/site3.png")));
                                        System.out.println(" Try sem Erro 404! " + pagina);
                                    } else {
                                        JOptionPane.showMessageDialog(null, "Erro 404");
                                        paginaWeb.setIcon(new ImageIcon(this.getClass().getResource("/imagens/404icon.png")));
                                        System.out.println("catch Erro 404! " + pagina);
                                    }

                                } catch (Throwable ex) {
                                    Logger.getLogger(RunPrincipal.class.getName()).log(Level.SEVERE, null, ex);

                                }
                            }
                        }, 10 * 1000);

                    } else {

                        //Caso o login falhe 
                        timer = new Timer();
                        timer.schedule(new TimerTask() {

                            @Override
                            public void run() {
                                try {
                                    animacaoThread.stop();
                                    //Limpa simulação de pacotes 
                                    folderGo1.setIcon(null);
                                    folderGo2.setIcon(null);
                                    folderGo3.setIcon(null);

                                    // Imagem de animação dos pacotes de enviado pelo Servidor
                                    backFolder1.setIcon(new ImageIcon(getClass().getResource("/animacao/folder_back.png")));
                                    backFolder2.setIcon(new ImageIcon(getClass().getResource("/animacao/folder_back.png")));
                                    backFolder3.setIcon(new ImageIcon(getClass().getResource("/animacao/folder_back.png")));
                                    respostaThread.start();
                                } catch (Throwable ex) {
                                    Logger.getLogger(RunPrincipal.class.getName()).log(Level.SEVERE, null, ex);

                                }
                            }
                        }, 5 * 1000);

                        timer = new Timer();
                        timer.schedule(new TimerTask() {

                            @Override
                            public void run() {
                                // cadeado blooqueado
                                try {
                                    // Inseri dados Status Servidor com a resposta vinda do servidor 
                                    jTASever.setText(jTASever.getText() + "\n Autenticação: " + response);
                                    jTAUsuer.setText(jTAUsuer.getText() + "\n Autenticação: " + response);

                                    respostaThread.stop();
                                    //Limpa simulação de pacontes 
                                    backFolder1.setIcon(null);
                                    backFolder2.setIcon(null);
                                    backFolder3.setIcon(null);
                                    // colocar cor seta que liga ate o icone site
                                    seta3.setBackground(Color.BLACK);
                                    // icon site vermelho bloqueado
                                    paginaWeb.setIcon(new ImageIcon(this.getClass().getResource("/imagens/site2.png")));

                                    JOptionPane.showMessageDialog(null, "Usuário ou Senha inválido");
                                } catch (Throwable ex) {
                                    Logger.getLogger(RunPrincipal.class.getName()).log(Level.SEVERE, null, ex);

                                }

                            }
                        }, 7 * 1000);

                    }
                    // adiciona navegador
                } catch (IOException ex) {
                    Logger.getLogger(RunPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }

            }
        } else {
            JOptionPane.showMessageDialog(null, "Informe uma URL");

        }
    }

    // que espera conexão conexão do cliente com o servidor  
    class Threadd extends Thread {

        @Override
        public void run() {

            while (true) {

                if (statusServidor == true) {
                    try {
                        socketServidor = serverTeste.esperarConexao();//protocolo
                        jTASever.setText(jTASever.getText().toString() + " \n Cliente conectado!");
                        statusServidor = false;

                    } catch (IOException ex) {

                        //jTASever.setText(jTASever.getText().toString() + " \n Cliente conectado!");
                        // Logger.getLogger(RunPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                    }

                } else {

                    try {
                        //outro processo, para conectar com mais cliente
                        if (verificarValidacao == true) {
                            // envia dados para o servidor  
                            serverTeste.tratarConexao(socketServidor);
                            verificarValidacao = false;
                        }
                    } catch (IOException ex) {

                        jTASever.setText(jTASever.getText().toString() + " \n Servidor já inicializado!");
                        Logger.getLogger(RunPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                    }

                }
                System.out.print("");

            }
        }

    }

    public class AnimacaoSolicitar extends Thread {

        int posicaoirFolder1 = folderGo1.getX();
        int posicaoirFolder2 = folderGo2.getX();
        int posicaoirFolder3 = folderGo3.getX();

        @Override
        public void run() {

            while (true) {

                try {
                    Thread.sleep(20);

                } catch (InterruptedException ex) {
                    Logger.getLogger(RunPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }
                if (folderGo1.getX() > painelAnimacao.getWidth()) {
                    folderGo1.setBounds(posicaoirFolder1 + 2, 0, 50, 25);
                } else {
                    folderGo1.setBounds(folderGo1.getX() + 2, 0, 50, 25);
                }

                if (folderGo2.getX() > painelAnimacao.getWidth()) {
                    folderGo2.setBounds(posicaoirFolder2 + 2, 0, 50, 25);
                } else {
                    folderGo2.setBounds(folderGo2.getX() + 2, 0, 50, 25);
                }

                if (folderGo3.getX() > painelAnimacao.getWidth()) {
                    folderGo3.setBounds(posicaoirFolder3 + 2, 0, 50, 25);
                } else {
                    folderGo3.setBounds(folderGo3.getX() + 2, 0, 50, 25);
                }
            }
        }
    }

    public class inicarAnimacaoResposta extends Thread {

        int posicaoirbackFolder1 = backFolder1.getX();
        int posicaoirbackFolder2 = backFolder2.getX();
        int posicaoirbackFolder3 = backFolder3.getX();

        public void run() {

            while (true) {

                try {
                    Thread.sleep(20);

                } catch (InterruptedException ex) {
                    Logger.getLogger(RunPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                }

                if ((backFolder3.getX() + painelAnimacao.getWidth()) < painelAnimacao.getWidth()) {
                    backFolder3.setBounds(posicaoirbackFolder3 + (- 3), backFolder3.getY(), 50, 25);

                } else {
                    backFolder3.setBounds(backFolder3.getX() + (- 3), backFolder3.getY(), 50, 25);
                }

                if ((backFolder2.getX() + painelAnimacao.getWidth()) < painelAnimacao.getWidth()) {

                    backFolder2.setBounds(posicaoirbackFolder2 + (- 3), backFolder2.getY(), 50, 25);

                } else {
                    backFolder2.setBounds(backFolder2.getX() + (- 2), backFolder2.getY(), 50, 25);
                }

                if ((backFolder1.getX() + painelAnimacao.getWidth()) < painelAnimacao.getWidth()) {

                    backFolder1.setBounds(posicaoirbackFolder1 + (- 3), backFolder1.getY(), 50, 25);

                } else {
                    backFolder1.setBounds(backFolder1.getX() + (- 4), backFolder1.getY(), 50, 25);
                }
            }

        }
    }

}
